import CtCILibrary.AssortedMethods;
import CtCILibrary.LinkedListNode;

public class Main {

    // リンクリストの最後のノード（tail）とサイズを保持するためのクラス
	public static class Result {
		public LinkedListNode tail; // リンクリストの最後のノードを指す
		public int size; // リンクリストのサイズを保持する
		public Result(LinkedListNode tail, int size) {
			this.tail = tail;
			this.size = size;
		}
	}
	
    // リンクリストの最後のノードとサイズを取得する関数
	public static Result getTailAndSize(LinkedListNode list) {
		if (list == null) return null; // リストが空ならnullを返す
		
		int size = 1; // リストのサイズを1から開始
		LinkedListNode current = list;
		while (current.next != null) { // リストの最後のノードまでループ
			size++; // サイズをカウントアップ
			current = current.next; // 次のノードに移動
		}
		return new Result(current, size); // 最後のノードとサイズを返す
	}
	
    // リンクリストの先頭からk番目のノードを取得する関数
	public static LinkedListNode getKthNode(LinkedListNode head, int k) {
		LinkedListNode current = head;
		while (k > 0 && current != null) { // k回ループまたはノードがnullになるまで
			current = current.next; // 次のノードに移動
			k--; // kをデクリメント
		}
		return current; // k番目のノードを返す
	}
	
    // 2つのリンクリストが交差するノードを見つける関数
	public static LinkedListNode findIntersection(LinkedListNode list1, LinkedListNode list2) {
		if (list1 == null || list2 == null) return null; // どちらかのリストが空ならnullを返す
		
		/* 各リストの最後のノードとサイズを取得 */
		Result result1 = getTailAndSize(list1);
		Result result2 = getTailAndSize(list2);
		
		/* 最後のノードが異なる場合、交差点は存在しない */
		if (result1.tail != result2.tail) {
			return null; // 交差点がないのでnullを返す
		}
		
		/* 各リストの開始位置を設定 */
		LinkedListNode shorter = result1.size < result2.size ? list1 : list2; // 短いリストを設定
		LinkedListNode longer = result1.size < result2.size ? list2 : list1; // 長いリストを設定
		
		/* 長いリストを短いリストと同じ長さに合わせるため、先に進める */
		longer = getKthNode(longer, Math.abs(result1.size - result2.size));
		
		/* 交差点を見つけるために両方のポインタを同時に進める */
		while (shorter != longer) { // 交差点が見つかるまでループ
			shorter = shorter.next; // 短いリストのポインタを進める
			longer = longer.next; // 長いリストのポインタを進める
		}
		
		/* 交差点のノードを返す */
		return longer; 
	}
	
	public static void main(String[] args) {
		/* 最初のリンクリストを作成 */
		int[] vals = {-1, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8};
		LinkedListNode list1 = AssortedMethods.createLinkedListFromArray(vals);
		
		/* 二つ目のリンクリストを作成 */
		int[] vals2 = {12, 14, 15};
		LinkedListNode list2 = AssortedMethods.createLinkedListFromArray(vals2);
		
		/* 二つ目のリンクリストの末尾を一つ目のリンクリストの途中に繋げて交差させる */
		list2.next.next = list1.next.next.next.next;
		
		/* リンクリストの内容を出力 */
		System.out.println(list1.printForward());
		System.out.println(list2.printForward());
		
		/* リンクリストの交差点を探す */
		LinkedListNode intersection = findIntersection(list1, list2);
		
		/* 交差点のノードを出力 */
		System.out.println(intersection.printForward());
	}

}
