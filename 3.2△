import java.util.Stack;

// 最小値を持つスタックを実装したクラス
class NodeWithMin {
    public int value;
    public int min;

    // コンストラクタ：値とその時点での最小値を初期化
    public NodeWithMin(int v, int min){
        value = v;
        this.min = min;
    }
}

// 最小値を追跡できるスタックの実装
class StackWithMin extends Stack<NodeWithMin> {
    // スタックに値をプッシュするメソッド
    public void push(int value) {
        // 現在の最小値と新しい値を比較し、新しい最小値を決定
        int newMin = Math.min(value, min());
        // 新しいノードをスタックにプッシュ
        super.push(new NodeWithMin(value, newMin));
    }
    
    // スタックの現在の最小値を返すメソッド
    public int min() {
        if (this.isEmpty()) {
            return Integer.MAX_VALUE; // スタックが空の場合は最大の整数値を返す
        } else {
            return peek().min; // スタックのトップにある最小値を返す
        }
    }
}

// メインクラス
public class Main {
    public static void main(String[] args) {
        StackWithMin stack = new StackWithMin(); // 最小値を追跡するスタックを作成
        int[] array = {2, 1, 3, 1}; // スタックにプッシュする値の配列

        // 配列内の値を順番にスタックにプッシュ
        for (int value : array) {
            stack.push(value);
            System.out.println("Pushed: " + value + ", Current Min: " + stack.min());
        }

        System.out.println();

        // スタックから値をポップし、最小値を表示
        for (int i = 0; i < array.length; i++) {
            int poppedValue = stack.pop().value; // ポップされた値
            System.out.println("Popped: " + poppedValue + ", New Min: " + stack.min());
        }
    }
}
